import tkinter as tk
from tkinter import ttk, messagebox, Frame, Label, Button, Entry, Text, Scrollbar
from API_Sach import APIBook, OpenLibraryAPI
from QuanLy import Book
from Book_QuanLy import add_book, get_all_books
import threading
from PIL import Image, ImageTk
import requests
from io import BytesIO

class GiaoDienTimKiemAPI(tk.Frame):
    def __init__(self, master):
        super().__init__(master, bg="white")
        self.master = master
        self.pack(fill="both", expand=True)
        
        # API instances
        self.google_api = APIBook()
        self.openlibrary_api = OpenLibraryAPI()
        
        # D·ªØ li·ªáu t√¨m ki·∫øm
        self.search_results = []
        self.selected_book = None
        
        self.tao_giao_dien()

    def tao_giao_dien(self):
        """T·∫°o giao di·ªán t√¨m ki·∫øm API"""
        # Container ch√≠nh
        main_container = Frame(self, bg="white")
        main_container.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Header
        header_frame = Frame(main_container, bg="#3498db", height=60)
        header_frame.pack(fill="x", pady=(0, 10))
        header_frame.pack_propagate(False)
        
        Label(
            header_frame,
            text="üîç T√åM KI·∫æM S√ÅCH QUA API",
            font=("Arial", 16, "bold"),
            bg="#3498db",
            fg="white"
        ).pack(pady=15)
        
        # Frame t√¨m ki·∫øm
        search_frame = Frame(main_container, bg="white")
        search_frame.pack(fill="x", pady=(0, 10))
        
        # T√¨m ki·∫øm
        Label(search_frame, text="T·ª´ kh√≥a t√¨m ki·∫øm:", bg="white", 
              font=("Arial", 10, "bold")).pack(side="left")
        
        self.search_var = tk.StringVar()
        self.search_entry = Entry(search_frame, textvariable=self.search_var, 
                                width=40, font=("Arial", 10))
        self.search_entry.pack(side="left", padx=(10, 10))
        self.search_entry.bind('<Return>', lambda e: self.tim_kiem_sach())
        
        # N√∫t t√¨m ki·∫øm
        self.btn_search = Button(
            search_frame,
            text="üîç T√¨m ki·∫øm",
            command=self.tim_kiem_sach,
            bg="#3498db",
            fg="white",
            font=("Arial", 10, "bold"),
            width=12,
            cursor="hand2"
        )
        self.btn_search.pack(side="left", padx=5)
        
        # Ch·ªçn API
        Label(search_frame, text="API:", bg="white", font=("Arial", 10)).pack(side="left", padx=(20, 5))
        self.api_var = tk.StringVar(value="Google Books")
        api_combo = ttk.Combobox(search_frame, textvariable=self.api_var, 
                               values=["Google Books", "Open Library"], 
                               width=15, state="readonly")
        api_combo.pack(side="left")
        
        # Frame ch√≠nh chia 2 c·ªôt
        content_frame = Frame(main_container, bg="white")
        content_frame.pack(fill="both", expand=True)
        
        # C·ªôt tr√°i - Danh s√°ch k·∫øt qu·∫£
        left_frame = Frame(content_frame, bg="white")
        left_frame.pack(side="left", fill="both", expand=True, padx=(0, 5))
        
        Label(left_frame, text="üìö K·∫øt qu·∫£ t√¨m ki·∫øm:", bg="white", 
              font=("Arial", 12, "bold")).pack(anchor="w", pady=(0, 5))
        
        # Treeview cho k·∫øt qu·∫£
        tree_frame = Frame(left_frame, bg="white")
        tree_frame.pack(fill="both", expand=True)
        
        self.tree = ttk.Treeview(tree_frame, columns=("Title", "Author", "Year"), 
                                show="headings", height=15)
        
        self.tree.heading("Title", text="Ti√™u ƒë·ªÅ")
        self.tree.heading("Author", text="T√°c gi·∫£") 
        self.tree.heading("Year", text="NƒÉm XB")
        
        self.tree.column("Title", width=300, minwidth=200)
        self.tree.column("Author", width=200, minwidth=150)
        self.tree.column("Year", width=80, minwidth=60)
        
        # Scrollbar cho tree
        tree_scroll = Scrollbar(tree_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=tree_scroll.set)
        
        self.tree.pack(side="left", fill="both", expand=True)
        tree_scroll.pack(side="right", fill="y")
        
        # Bind event
        self.tree.bind("<<TreeviewSelect>>", self.on_select_book)
        
        # C·ªôt ph·∫£i - Chi ti·∫øt s√°ch
        right_frame = Frame(content_frame, bg="white", width=400)
        right_frame.pack(side="right", fill="y", padx=(5, 0))
        right_frame.pack_propagate(False)
        
        Label(right_frame, text="üìñ Chi ti·∫øt s√°ch:", bg="white", 
              font=("Arial", 12, "bold")).pack(anchor="w", pady=(0, 10))
        
        # Frame th√¥ng tin chi ti·∫øt
        detail_frame = Frame(right_frame, bg="#f8f9fa", relief="solid", bd=1)
        detail_frame.pack(fill="both", expand=True, padx=5)
        
        # H√¨nh ·∫£nh s√°ch (n·∫øu c√≥)
        self.image_label = Label(detail_frame, bg="#f8f9fa", text="üìö\nKh√¥ng c√≥ h√¨nh", 
                               font=("Arial", 10), width=20, height=8)
        self.image_label.pack(pady=10)
        
        # Th√¥ng tin chi ti·∫øt
        self.detail_text = Text(detail_frame, wrap="word", font=("Arial", 9), 
                              height=20, width=45, bg="#f8f9fa")
        detail_scroll = Scrollbar(detail_frame, orient="vertical", command=self.detail_text.yview)
        self.detail_text.configure(yscrollcommand=detail_scroll.set)
        
        self.detail_text.pack(side="left", fill="both", expand=True, padx=(10, 0), pady=10)
        detail_scroll.pack(side="right", fill="y", pady=10)
        
        # Frame n√∫t th√™m
        button_frame = Frame(right_frame, bg="white")
        button_frame.pack(fill="x", pady=10)
        
        self.btn_add = Button(
            button_frame,
            text="‚ûï Th√™m v√†o th∆∞ vi·ªán",
            command=self.them_sach_vao_thu_vien,
            bg="#27ae60",
            fg="white",
            font=("Arial", 11, "bold"),
            height=2,
            cursor="hand2",
            state="disabled"
        )
        self.btn_add.pack(fill="x", padx=5)
        
        # Status label
        self.status_label = Label(main_container, text="S·∫µn s√†ng t√¨m ki·∫øm...", 
                                bg="white", fg="#7f8c8d", font=("Arial", 9))
        self.status_label.pack(pady=5)

    def tim_kiem_sach(self):
        """T√¨m ki·∫øm s√°ch qua API"""
        keyword = self.search_var.get().strip()
        if not keyword:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm!")
            return
        
        # Disable n√∫t t√¨m ki·∫øm
        self.btn_search.config(state="disabled", text="üîÑ ƒêang t√¨m...")
        self.status_label.config(text="ƒêang t√¨m ki·∫øm...", fg="#f39c12")
        
        # X√≥a k·∫øt qu·∫£ c≈©
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        self.xoa_chi_tiet()
        
        # T√¨m ki·∫øm trong thread ri√™ng
        def search_thread():
            try:
                api_choice = self.api_var.get()
                
                if api_choice == "Google Books":
                    self.search_results = self.google_api.tim_kiem_sach(keyword, 30)
                else:
                    self.search_results = self.openlibrary_api.tim_kiem_sach(keyword, 30)
                
                # C·∫≠p nh·∫≠t UI trong main thread
                self.master.after(0, self.hien_thi_ket_qua)
                
            except Exception as e:
                self.master.after(0, lambda: self.xu_ly_loi(str(e)))
        
        # Ch·∫°y trong thread
        threading.Thread(target=search_thread, daemon=True).start()

    def hien_thi_ket_qua(self):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm"""
        try:
            if self.search_results:
                for book in self.search_results:
                    self.tree.insert("", "end", values=(
                        book.get('title', '')[:50] + ('...' if len(book.get('title', '')) > 50 else ''),
                        book.get('author', '')[:30] + ('...' if len(book.get('author', '')) > 30 else ''),
                        book.get('published_date', '')
                    ))
                
                self.status_label.config(text=f"T√¨m th·∫•y {len(self.search_results)} k·∫øt qu·∫£", fg="#27ae60")
            else:
                self.status_label.config(text="Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o", fg="#e74c3c")
        
        except Exception as e:
            self.xu_ly_loi(str(e))
        
        finally:
            # Enable l·∫°i n√∫t t√¨m ki·∫øm
            self.btn_search.config(state="normal", text="üîç T√¨m ki·∫øm")

    def on_select_book(self, event):
        """Khi ch·ªçn s√°ch t·ª´ danh s√°ch"""
        selection = self.tree.selection()
        if selection:
            item = self.tree.item(selection[0])
            index = self.tree.index(selection[0])
            
            if index < len(self.search_results):
                self.selected_book = self.search_results[index]
                self.hien_thi_chi_tiet()
                self.btn_add.config(state="normal")

    def hien_thi_chi_tiet(self):
        """Hi·ªÉn th·ªã chi ti·∫øt s√°ch ƒë√£ ch·ªçn"""
        if not self.selected_book:
            return
        
        # X√≥a n·ªôi dung c≈©
        self.detail_text.delete(1.0, tk.END)
        
        # Hi·ªÉn th·ªã th√¥ng tin
        book = self.selected_book
        detail_info = f"""üìö TH√îNG TIN CHI TI·∫æT

üìñ Ti√™u ƒë·ªÅ: {book.get('title', 'N/A')}

‚úçÔ∏è T√°c gi·∫£: {book.get('author', 'N/A')}

üìÇ Th·ªÉ lo·∫°i: {book.get('category', 'N/A')}

üìÖ NƒÉm xu·∫•t b·∫£n: {book.get('published_date', 'N/A')}

üìÑ S·ªë trang: {book.get('page_count', 'N/A')}

üî¢ ISBN: {book.get('isbn', 'N/A')}

üìù M√¥ t·∫£:
{book.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')}
"""
        
        self.detail_text.insert(1.0, detail_info)
        
        # T·∫£i h√¨nh ·∫£nh n·∫øu c√≥
        if book.get('thumbnail'):
            self.tai_hinh_anh(book['thumbnail'])
        else:
            self.image_label.config(image="", text="üìö\nKh√¥ng c√≥ h√¨nh")

    def tai_hinh_anh(self, url):
        """T·∫£i v√† hi·ªÉn th·ªã h√¨nh ·∫£nh s√°ch"""
        def load_image():
            try:
                response = requests.get(url, timeout=5)
                if response.status_code == 200:
                    image = Image.open(BytesIO(response.content))
                    # Resize ·∫£nh
                    image = image.resize((120, 160), Image.Resampling.LANCZOS)
                    photo = ImageTk.PhotoImage(image)
                    
                    # C·∫≠p nh·∫≠t UI trong main thread
                    self.master.after(0, lambda: self.cap_nhat_hinh_anh(photo))
            except Exception as e:
                print(f"L·ªói t·∫£i h√¨nh ·∫£nh: {e}")
        
        threading.Thread(target=load_image, daemon=True).start()

    def cap_nhat_hinh_anh(self, photo):
        """C·∫≠p nh·∫≠t h√¨nh ·∫£nh trong UI"""
        self.image_label.config(image=photo, text="")
        self.image_label.image = photo  # Gi·ªØ reference

    def xoa_chi_tiet(self):
        """X√≥a th√¥ng tin chi ti·∫øt"""
        self.detail_text.delete(1.0, tk.END)
        self.image_label.config(image="", text="üìö\nKh√¥ng c√≥ h√¨nh")
        self.btn_add.config(state="disabled")
        self.selected_book = None

    def them_sach_vao_thu_vien(self):
        """Th√™m s√°ch ƒë√£ ch·ªçn v√†o th∆∞ vi·ªán"""
        if not self.selected_book:
            return
        
        try:
            book = self.selected_book
            
            # T·∫°o dialog ƒë·ªÉ nh·∫≠p th√¥ng tin b·ªï sung
            dialog = tk.Toplevel(self.master)
            dialog.title("Th√™m s√°ch v√†o th∆∞ vi·ªán")
            dialog.geometry("500x400")
            dialog.configure(bg="white")
            dialog.transient(self.master)
            dialog.grab_set()
            
            # CƒÉn gi·ªØa dialog
            dialog.update_idletasks()
            x = (dialog.winfo_screenwidth() - 500) // 2
            y = (dialog.winfo_screenheight() - 400) // 2
            dialog.geometry(f"500x400+{x}+{y}")
            
            # Frame cho form
            form_frame = Frame(dialog, bg="white")
            form_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            Label(form_frame, text="üìö TH√äM S√ÅCH V√ÄO TH∆Ø VI·ªÜN", 
                  font=("Arial", 14, "bold"), bg="white", fg="#2c3e50").pack(pady=(0, 20))
            
            # C√°c tr∆∞·ªùng nh·∫≠p li·ªáu
            fields = {}
            
            # M√£ s√°ch
            Label(form_frame, text="M√£ s√°ch:", bg="white", font=("Arial", 10)).pack(anchor="w")
            fields['ma_sach'] = tk.StringVar(value=f"BK{len(get_all_books()) + 1:04d}")
            Entry(form_frame, textvariable=fields['ma_sach'], width=50).pack(fill="x", pady=(0, 10))
            
            # T√™n s√°ch
            Label(form_frame, text="T√™n s√°ch:", bg="white", font=("Arial", 10)).pack(anchor="w")
            fields['ten_sach'] = tk.StringVar(value=book.get('title', ''))
            Entry(form_frame, textvariable=fields['ten_sach'], width=50).pack(fill="x", pady=(0, 10))
            
            # T√°c gi·∫£
            Label(form_frame, text="T√°c gi·∫£:", bg="white", font=("Arial", 10)).pack(anchor="w")
            fields['tac_gia'] = tk.StringVar(value=book.get('author', ''))
            Entry(form_frame, textvariable=fields['tac_gia'], width=50).pack(fill="x", pady=(0, 10))
            
            # Th·ªÉ lo·∫°i
            Label(form_frame, text="Th·ªÉ lo·∫°i:", bg="white", font=("Arial", 10)).pack(anchor="w")
            fields['the_loai'] = tk.StringVar(value=book.get('category', 'General'))
            combo_theloai = ttk.Combobox(form_frame, textvariable=fields['the_loai'], 
                                       values=["Literature", "Science", "Technology", "Education", 
                                             "Fiction", "History", "Philosophy", "General"], width=47)
            combo_theloai.pack(fill="x", pady=(0, 10))
            
            # S·ªë l∆∞·ª£ng
            Label(form_frame, text="S·ªë l∆∞·ª£ng:", bg="white", font=("Arial", 10)).pack(anchor="w")
            fields['so_luong'] = tk.StringVar(value="1")
            Entry(form_frame, textvariable=fields['so_luong'], width=50).pack(fill="x", pady=(0, 20))
            
            # N√∫t
            button_frame = Frame(form_frame, bg="white")
            button_frame.pack(fill="x")
            
            def luu_sach():
                try:
                    # Ki·ªÉm tra d·ªØ li·ªáu
                    if not all([fields['ma_sach'].get().strip(), fields['ten_sach'].get().strip(),
                              fields['tac_gia'].get().strip()]):
                        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
                        return
                    
                    so_luong = int(fields['so_luong'].get().strip())
                    if so_luong <= 0:
                        raise ValueError("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0")
                    
                    # T·∫°o ƒë·ªëi t∆∞·ª£ng s√°ch
                    new_book = Book(
                        fields['ma_sach'].get().strip(),
                        fields['ten_sach'].get().strip(),
                        fields['tac_gia'].get().strip(),
                        fields['the_loai'].get(),
                        so_luong
                    )
                    
                    # Th√™m v√†o database
                    add_book(new_book)
                    
                    messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ th√™m s√°ch v√†o th∆∞ vi·ªán!")
                    dialog.destroy()
                    
                except ValueError as e:
                    messagebox.showerror("L·ªói", f"D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: {str(e)}")
                except Exception as e:
                    messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra: {str(e)}")
            
            Button(button_frame, text="üíæ L∆∞u s√°ch", command=luu_sach,
                  bg="#27ae60", fg="white", font=("Arial", 10, "bold"), width=15).pack(side="left", padx=(0, 10))
            
            Button(button_frame, text="‚ùå H·ªßy", command=dialog.destroy,
                  bg="#e74c3c", fg="white", font=("Arial", 10, "bold"), width=15).pack(side="left")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra: {str(e)}")

    def xu_ly_loi(self, error_msg):
        """X·ª≠ l√Ω l·ªói"""
        self.status_label.config(text=f"L·ªói: {error_msg}", fg="#e74c3c")
        self.btn_search.config(state="normal", text="üîç T√¨m ki·∫øm")
        messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra: {error_msg}")